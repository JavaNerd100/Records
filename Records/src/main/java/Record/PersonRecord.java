package Record;

import Interface.Employee;

import java.time.LocalDate;


/**
 *  we can replace our repetitious data classes with records.
 *  Records are immutable data classes that require only the type and name of fields.
 *  The equals, hashCode, and toString methods, as well as the private, final fields
 *  and public constructor, are generated by the Java compiler.
 *  They're basically just streamlined versions of classes with a few restrictions added on them, such
 *  as the fact that they can't extend anything and they themselves can't be extended either, but they
 *  can implement interfaces.
 *  And now that we know that interfaces can have default methods.
 *  The reason that there won't be setters method on record is because records are final
 *  They are made final.But also the fields within the record are final, which means that once they've been set by the constructor,
 *  they can't be changed. And since they can't be changed after creation of the object, there's no point in generating set or
 *  methods for those fields.
 *  Setter methods imply that you can change those fields after the object has already been created, and
 *  you can't do that with records. And the reason for that has to do with a concept called mutability.
 *  General Rules of Records
 *  1) Record can't extend any class . However,they can implement interface.
 *  2) You can't declare any other instance, fields or instance variables on the record other than those fields
 *     that you are defining in the constructor itself.  Now notice I said instance variables.
 *  3) You can define static fields on on on a record and note also that since record classes themselves are
 *     final and therefore they cannot be extended. Then also, they cannot be abstract because the only thing
 *     you can really do with an abstract class is to extend it. So no abstraction for records, they can be nested
 *     inside of other classes.
 *
 */
public record PersonRecord(String lastName, String firstName, LocalDate dob,int salary, String designation,String company) implements Employee {

    public static String UNKOWN_COMPANY = "N/A";

    public static PersonRecord unNamed(String lastName,String firstName){
        return new PersonRecord("Unkown","Unkown",LocalDate.of(1,1,1),0,"Unkown","Unkown");
    }
    @Override
    public int getSalary() {
        return this.salary;
    }

    @Override
    public String getDesignation() {
        return this.designation;
    }

    @Override
    public String getCompanyName() {
        return this.company;
    }

    public String sayHello(){
        return "Hello World";
    }


}
